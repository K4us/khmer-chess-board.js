import CellManager from './CellManager';
import KhmerChessBoard from './KhmerChessBoard';
import { ListenerType } from 'khmer-chess';
import BoardManagerEventController from './event/BoardManagerEventController';
import BoardStatusEventController from './event/BoardStatusEventController';
import { BoardStatusEvent } from './event/BoardStatusEvent';
export default class BoardManager {
    khmerChessBoard: KhmerChessBoard;
    _cells: CellManager[];
    boardStatusEventController: BoardStatusEventController;
    boardEventController: BoardManagerEventController<CellManager>;
    isUpsideDown: boolean;
    constructor(khmerChessBoard: KhmerChessBoard);
    destroy(): void;
    selectCell(cell: CellManager): void;
    attachClickEvent(): void;
    detachClickEvent(): void;
    set(i: number, cell: CellManager): void;
    get(index: number): CellManager;
    getKing(color: string): CellManager | null;
    getByIndexCode(indexCode: string): CellManager;
    getByXY(x: number, y: number): CellManager;
    flip(): void;
    _applyFlip(): void;
    get pieceCells(): CellManager[];
    get pieceInTurnCells(): CellManager[];
    get pieceNotInTurnCells(): CellManager[];
    get selectedCells(): CellManager[];
    get canMoveCells(): CellManager[];
    get movedCells(): CellManager[];
    get attackedCells(): CellManager[];
    get turnCells(): CellManager[];
    get piecesInBoard(): (import("khmer-chess").Piece | null)[];
    get isTurning(): boolean;
    toString(): string;
    clearSelectedCells(): void;
    clearCanMoveCells(): void;
    highlightMovedCells(fromCell: CellManager, toCell: CellManager): void;
    clearMovedCells(): void;
    clearAttackCells(): void;
    enableTurnCells(): void;
    clearTurnCells(): void;
    removePiecesFromCells(): void;
    applyFlippingFlag(): void;
    setCellNote(): void;
    clearCellNote(): void;
    renderKhmerChessPieces(): void;
    get isP2P(): boolean;
    setP2P(b: boolean): void;
    takeTurn(): void;
    checkBoardEvent(): void;
    getBoardStatusEvents(): BoardStatusEvent[];
    addBoardStatusEventListener(listener: ListenerType<BoardStatusEvent>): void;
    removeBoardStatusEventListener(listener: ListenerType<BoardStatusEvent>): void;
    forceCount(): boolean;
}
