"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = addCssNote;

var _khmerChess = require("khmer-chess");

var _appendCss = _interopRequireDefault(require("./appendCss"));

var _svg = require("../providers/svg");

var _constance = require("../providers/constance");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
 * Copyright (c) 2021, K4us
 * Author: Raksa Eng <eng.raksa@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *---------------------------------------------------------------------------- */
function addCssNote(_ref) {
  var uniqueClassName = _ref.uniqueClassName,
      options = _ref.options,
      isEnglish = _ref.isEnglish;
  var verticalLetters = isEnglish ? _khmerChess.VERTICAL_NOTE_LETTERS_ENGLISH : _khmerChess.VERTICAL_NOTE_LETTERS;
  var horizontalLetters = isEnglish ? _khmerChess.HORIZONTAL_NOTE_LETTERS_ENGLISH : _khmerChess.HORIZONTAL_NOTE_LETTERS;
  var width = options.width,
      cellWidth = options.cellWidth;
  var selector = "".concat(_constance.CSS_TABLE_SELECTOR, ".").concat(uniqueClassName);
  var css = '';
  var fSize = 15 * width / 600;

  for (var i = 0; i < _constance.TD_GRAVEYARD_NUMBER; i++) {
    var _bgImg = (0, _svg.genBackgroundNote)([{
      x: cellWidth / 2 - cellWidth / 10,
      y: cellWidth,
      t: verticalLetters[i]
    }], cellWidth, fSize);

    css += "\n        ".concat(selector, " td").concat(isEnglish ? '.' + options.enClass : '', ".").concat(_constance.GRAVEYARD_NOTE_PREFIX_CLASS, "-").concat(i + 1).concat(_constance.CSS_PSEUDO_NOTE, " {\n            background-image: ").concat(_bgImg, ";\n        }\n        ");
  }

  var hx = cellWidth / 2 - cellWidth / 10;
  var vy = cellWidth / 2 + cellWidth / 10;

  var bgImg = function bgImg(i) {
    return (0, _svg.genBackgroundNote)([{
      x: hx,
      y: cellWidth,
      t: horizontalLetters[i]
    }], cellWidth, fSize);
  };

  for (var _i = 0; _i < _khmerChess.ROW_NUMBER; _i++) {
    css += "\n        ".concat(selector, " td").concat(isEnglish ? '.' + options.enClass : '', ".").concat(_constance.BOARD_NOTE_H_PREFIX_CLASS, "-").concat(_i + 1).concat(_constance.CSS_PSEUDO_NOTE, " {\n            background-image: ").concat(bgImg(_i), ";\n        }\n        ").concat(selector, " td").concat(isEnglish ? '.' + options.enClass : '', ".").concat(_constance.FLIPPED_CLASS, ".").concat(_constance.BOARD_NOTE_H_PREFIX_CLASS, "-").concat(_i + 1).concat(_constance.CSS_PSEUDO_NOTE, " {\n            background-image: ").concat(bgImg(_khmerChess.ROW_NUMBER - _i - 1), ";\n        }\n        ");
  }

  bgImg = function bgImg(i) {
    return (0, _svg.genBackgroundNote)([{
      x: 0,
      y: vy,
      t: verticalLetters[i]
    }], cellWidth, fSize);
  };

  for (var j = 0; j < _khmerChess.ROW_NUMBER; j++) {
    css += "\n            ".concat(selector, " td").concat(isEnglish ? '.' + options.enClass : '', ".").concat(_constance.BOARD_NOTE_V_PREFIX_CLASS, "-").concat(j + 1).concat(_constance.CSS_PSEUDO_NOTE, " {\n                background-image: ").concat(bgImg(j), ";\n            }\n            ").concat(selector, " td").concat(isEnglish ? '.' + options.enClass : '', ".flipped.").concat(_constance.BOARD_NOTE_V_PREFIX_CLASS, "-").concat(j + 1).concat(_constance.CSS_PSEUDO_NOTE, " {\n                background-image: ").concat(bgImg(_khmerChess.ROW_NUMBER - j - 1), ";\n            }\n            ");
  }

  bgImg = function bgImg(i) {
    return (0, _svg.genBackgroundNote)([{
      x: hx,
      y: cellWidth,
      t: horizontalLetters[i]
    }, {
      x: 0,
      y: vy,
      t: verticalLetters[i]
    }], cellWidth, fSize);
  };

  css += "\n    ".concat(selector, " td").concat(isEnglish ? '.' + options.enClass : '', ".").concat(_constance.BOARD_NOTE_V_PREFIX_CLASS, "-1.").concat(_constance.BOARD_NOTE_H_PREFIX_CLASS, "-1").concat(_constance.CSS_PSEUDO_NOTE, " {\n        background-image: ").concat(bgImg(0), ";\n    }\n    ").concat(selector, " td").concat(isEnglish ? '.' + options.enClass : '', ".").concat(_constance.FLIPPED_CLASS, ".").concat(_constance.BOARD_NOTE_V_PREFIX_CLASS, "-1.").concat(_constance.BOARD_NOTE_H_PREFIX_CLASS, "-1").concat(_constance.CSS_PSEUDO_NOTE, " {\n        background-image: ").concat(bgImg(7), ";\n    }\n    ");
  (0, _appendCss["default"])(uniqueClassName, css);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,