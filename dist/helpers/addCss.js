"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = addCss;

var _khmerChess = require("khmer-chess");

var _svg = require("../providers/svg");

var _constance = require("../providers/constance");

var _appendCss = _interopRequireDefault(require("./appendCss"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
 * Copyright (c) 2021, K4us
 * Author: Raksa Eng <eng.raksa@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *---------------------------------------------------------------------------- */
function addCss(_ref) {
  var uniqueClassName = _ref.uniqueClassName,
      options = _ref.options;
  var width = options.width,
      cellWidth = options.cellWidth;
  var pieceFontSize = width / 12;
  var selector = "".concat(_constance.CSS_TABLE_SELECTOR, ".").concat(uniqueClassName);
  var css = '';
  css += "\n        ".concat(selector, " {\n            table-layout: fixed;\n            border-collapse: collapse;\n            border-spacing: 0px;\n            width: ").concat(width, "px;\n            text-align: center;\n            border: 0px;\n            padding: 0px;\n            margin: auto;\n            background-color: #f4d1a6;\n        }\n        ").concat(selector, ".").concat(_constance.POPUP_CLASS_NAME, " {\n            position: fixed;\n            box-shadow: 10px 10px 80px #000000, -10px -10px 80px #000000;\n        }\n        ").concat(selector, " table.").concat(_constance.GRAVEYARD_CLASS_NAME, " {\n            table-layout: fixed;\n            border-collapse: collapse;\n            border-spacing: 0px;\n            text-align: center;\n            border: 0px;\n            padding: 0px;\n            margin: auto;\n            background-color: #ffc57d;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " {\n            width: ").concat(width, "px;\n            height: ").concat(cellWidth, "px;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_SHADOW_CLASS_NAME, " {\n            width: ").concat(width, "px;\n            height: 0;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td {\n            user-select: none;\n            border: 1px solid #9e9e9e87;\n            padding: 0px;\n            margin: 0px;\n            max-width: ").concat(cellWidth, "px;\n            max-height: ").concat(cellWidth, "px;\n            background-repeat: no-repeat;\n            cursor: pointer;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_SHADOW_CLASS_NAME, " div {\n            width: ").concat(cellWidth, "px;\n            height: ").concat(cellWidth, "px;\n            position: absolute;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td,\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td::before,\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td::after {\n            font-size: ").concat(pieceFontSize, "px;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td::after {\n            opacity: 0.4;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td::before {\n            float: left;\n        }\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td:not(.graveyard)::before,\n        ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td:not(.graveyard)::after {\n            width: ").concat(cellWidth, "px;\n            height: ").concat(cellWidth, "px;\n            background-size: ").concat(cellWidth, "px ").concat(cellWidth, "px;\n            display: block;\n            content: ' ';\n        }\n    "); // moved cells

  css += "\n    ".concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td.").concat(_constance.MOVED_CLASS_NAME).concat(_constance.CSS_PSEUDO_HIGHLIGHT, " {\n        ").concat(_svg.svgCSS.moved(), "\n    }"); // selected pice

  css += "\n    ".concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td.").concat(_constance.SELECTED_CLASS_NAME).concat(_constance.CSS_PSEUDO_HIGHLIGHT, " {\n        ").concat(_svg.svgCSS.selected(), "\n    }"); // can move

  css += "\n    ".concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td.").concat(_constance.CAN_MOVE_CLASS_NAME).concat(_constance.CSS_PSEUDO_HIGHLIGHT, " {\n        ").concat(_svg.svgCSS.canMove(), "\n    }"); // Turn

  _khmerChess.Piece.colorChars.forEach(function (color) {
    _khmerChess.Piece.pieceChars.forEach(function (type) {
      var attackedSVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" viewBox=\"-10 0 1024 1000\">\n                <style>".concat(_svg.svgCSS.turn(), "</style>\n                ").concat(_svg.PIECES_SVG[color + type], "\n            </svg>");
      css += "\n                ".concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td.").concat(_constance.PIECE_CLASS_NAME, ".").concat(_constance.TURN_CLASS_NAME, ".type-").concat(type, ".color-").concat(color).concat(_constance.CSS_PSEUDO_PIECE, " {\n                    background-image: url('data:image/svg+xml;utf8,").concat(encodeURIComponent(attackedSVG), "');\n                }\n                ");
    });
  }); // Attacked


  _khmerChess.Piece.colorChars.forEach(function (color) {
    _khmerChess.Piece.pieceChars.forEach(function (type) {
      var attackedSVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" viewBox=\"-10 0 1024 1000\">\n                <style>".concat(_svg.svgCSS.attacked(), "</style>\n                ").concat(_svg.PIECES_SVG[color + type], "\n            </svg>");
      var notAttackedSVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" viewBox=\"-10 0 1024 1000\">\n                <style>".concat(_svg.svgCSS.notAttacked(), "</style>\n                ").concat(_svg.PIECES_SVG[color + type], "\n            </svg>");
      css += "\n                ".concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td.").concat(_constance.PIECE_CLASS_NAME, ".").concat(_constance.ATTACKED_CLASS_NAME, ".type-").concat(type, ".color-").concat(color).concat(_constance.CSS_PSEUDO_PIECE, " {\n                    background-image: url('data:image/svg+xml;utf8,").concat(encodeURIComponent(attackedSVG), "');\n                }\n                ").concat(selector, " .").concat(_constance.TR_PIECE_CLASS_NAME, " td.").concat(_constance.PIECE_CLASS_NAME, ".type-").concat(type, ".color-").concat(color).concat(_constance.CSS_PSEUDO_PIECE, "\n                , ").concat(selector, " .").concat(_constance.TR_PIECE_SHADOW_CLASS_NAME, " div.type-").concat(type, ".color-").concat(color, "{\n                    background-image: url('data:image/svg+xml;utf8,").concat(encodeURIComponent(notAttackedSVG), "');\n                }\n                ");
    });
  });

  (0, _appendCss["default"])(uniqueClassName, css);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,