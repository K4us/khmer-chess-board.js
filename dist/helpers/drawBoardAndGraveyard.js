"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = drawBoardAndGraveyard;

var _khmerChess = require("khmer-chess");

var _CellManager = _interopRequireDefault(require("../CellManager"));

var _constance = require("../providers/constance");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
 * Copyright (c) 2021, K4us
 * Author: Raksa Eng <eng.raksa@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *---------------------------------------------------------------------------- */
function drawBoardAndGraveyard(_ref) {
  var uniqueClassName = _ref.uniqueClassName,
      options = _ref.options,
      container = _ref.container,
      boardManager = _ref.boardManager,
      graveyardManager = _ref.graveyardManager;
  var width = options.width,
      cellWidth = options.cellWidth,
      graveyardContainerHeight = options.graveyardContainerHeight,
      graveyardWidth = options.graveyardWidth,
      graveyardContainerPadding = options.graveyardContainerPadding;

  var createTable = function createTable() {
    var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : container;
    var table = document.createElement('table');
    parent.appendChild(table);
    return table;
  };

  var createTbody = function createTbody(parent) {
    var tbody = document.createElement('tbody');
    parent.appendChild(tbody);
    return tbody;
  };

  var createTr = function createTr(parent) {
    var tr = document.createElement('tr');
    parent.appendChild(tr);
    return tr;
  };

  var createTd = function createTd(parent) {
    var td = document.createElement('td');
    parent.appendChild(td);
    return td;
  };

  var table = createTable();
  table.classList.add(_constance.TABLE_CLASS);
  table.classList.add(uniqueClassName);
  var tbody = createTbody(table);

  for (var i = 0; i < _khmerChess.ROW_NUMBER; i++) {
    var _tr = createTr(tbody);

    _tr.classList.add(_constance.TR_PIECE_CLASS_NAME);

    for (var j = 0; j < _khmerChess.ROW_NUMBER; j++) {
      var td = createTd(_tr);
      var cellPiece = new _CellManager["default"](new _khmerChess.Point(j, _khmerChess.ROW_NUMBER - i - 1), td, null);

      var index = _khmerChess.Point.xyToIndex(j, _khmerChess.ROW_NUMBER - i - 1);

      boardManager.put(index, cellPiece);
    }
  }

  var tr = createTr(tbody);
  tr.classList.add(_constance.TR_PIECE_SHADOW_CLASS_NAME);
  var tdShadow = createTd(tr);
  var trPlayerContainer = createTr(tbody);
  trPlayerContainer.classList.add('tr-player');
  trPlayerContainer.style.height = "".concat(graveyardContainerHeight / 3);
  var tdPlayerContainer = createTd(trPlayerContainer);
  tdPlayerContainer.classList.add('player');
  tdPlayerContainer.addEventListener('mousewheel', function (e) {
    this.scrollLeft -= e.wheelDelta;
    e.preventDefault();
  }, false);
  tdPlayerContainer.colSpan = 8;
  var trGraveyardContainer = createTr(tbody);
  trGraveyardContainer.classList.add('tr-graveyard');
  trGraveyardContainer.style.height = "".concat(graveyardContainerHeight);
  var tdGraveyardContainer = createTd(trGraveyardContainer);
  tdGraveyardContainer.classList.add('graveyard');
  tdGraveyardContainer.addEventListener('mousewheel', function (e) {
    this.scrollLeft -= e.wheelDelta;
    e.preventDefault();
  }, false);
  tdGraveyardContainer.colSpan = 8;
  var div = document.createElement('div');
  div.style.overflowX = 'scroll';
  div.style.overflowY = 'hidden';
  tdGraveyardContainer.appendChild(div);
  var tableGraveyard = createTable(div);
  tableGraveyard.classList.add(_constance.GRAVEYARD_CLASS_NAME);
  tableGraveyard.style.width = "".concat(graveyardWidth);
  tableGraveyard.style.height = "".concat(cellWidth);
  tableGraveyard.style.boxShadow = "inset 0 0 ".concat(width / 60, "px #000000");
  var tbodyGraveyard = createTbody(tableGraveyard);
  var trGraveyard = createTr(tbodyGraveyard);
  trGraveyard.classList.add(_constance.TR_PIECE_CLASS_NAME);
  trGraveyard.style.width = "".concat(graveyardWidth);

  for (var _i = 0; _i < _constance.TD_GRAVEYARD_NUMBER; _i++) {
    var tdGraveyard = createTd(trGraveyard);

    var _cellPiece = new _CellManager["default"](new _khmerChess.Point(_i, 0), tdGraveyard, null, true);

    graveyardManager.push(_cellPiece);
  }

  return {
    domBoard: table,
    domGraveyard: tableGraveyard,
    playerContainer: tdPlayerContainer,
    tdShadow: tdShadow
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,