"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _package = _interopRequireDefault(require("../package.json"));

var _GraveyardManager = _interopRequireDefault(require("./GraveyardManager"));

var _SoundManager = _interopRequireDefault(require("./SoundManager"));

var _BoardManager = _interopRequireDefault(require("./BoardManager"));

var _constance = require("./providers/constance");

var _addCss = _interopRequireDefault(require("./helpers/addCss"));

var _addCssNote = _interopRequireDefault(require("./helpers/addCssNote"));

var _drawBoardAndGraveyard = _interopRequireDefault(require("./helpers/drawBoardAndGraveyard"));

var _OptionsManager = _interopRequireDefault(require("./OptionsManager"));

var _khmerChess = require("khmer-chess");

var _MessageManager = _interopRequireDefault(require("./MessageManager"));

var _PlayerManager = _interopRequireDefault(require("./PlayerManager"));

var _PieceShadowManager = _interopRequireDefault(require("./PieceShadowManager"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var KhmerChessBoard = /*#__PURE__*/function () {
  function KhmerChessBoard() {
    _classCallCheck(this, KhmerChessBoard);

    _defineProperty(this, "containerDom", void 0);

    _defineProperty(this, "domBoard", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "playerManager", void 0);

    _defineProperty(this, "graveyardManager", void 0);

    _defineProperty(this, "boardManager", void 0);

    _defineProperty(this, "khmerChess", void 0);

    _defineProperty(this, "soundManager", void 0);

    _defineProperty(this, "messageManager", void 0);

    _defineProperty(this, "pieceShadowManager", void 0);
  }

  _createClass(KhmerChessBoard, [{
    key: "setOptions",
    value: function setOptions(options) {
      var _this = this;

      this.options = new _OptionsManager["default"]();
      this.playerManager = new _PlayerManager["default"]();
      this.graveyardManager = new _GraveyardManager["default"]();
      this.boardManager = new _BoardManager["default"]();
      this.khmerChess = new _khmerChess.KhmerChess();
      this.soundManager = new _SoundManager["default"]();
      this.messageManager = new _MessageManager["default"]();
      this.pieceShadowManager = new _PieceShadowManager["default"]();

      if (!options.container) {
        throw new Error('Container is required!');
      }

      this.containerDom = options.container;

      if (options.width < this.options.minWidth) {
        throw new Error("Board width must more than ".concat(this.options.minWidth, " "));
      }

      if (options.width) {
        this.options.width = options.width;
      }

      if (options.width) {
        this.options.width = options.width;
      }

      this.playerManager.setProps(this);
      this.graveyardManager.setProps(this);
      this.boardManager.setProps(this);
      this.messageManager.setProps(this);
      this.pieceShadowManager.setProps(this);
      this.render();
      this.boardManager.enableClick();
      var boardEventController = this.boardManager.boardEventController;
      boardEventController.addOnCellSelectedEventListener(function (cell) {
        var points = _this.khmerChess.getCanMovePointsByPoint(cell.point);

        points.forEach(function (point) {
          var cell = _this.boardManager.get(point.index);

          cell.setCanMove();
        });
      });
      boardEventController.addOnCellDeselectedEventListener(function (cell) {
        _this.boardManager.clearCanMoveCells();
      });
      boardEventController.addOnAttemptMoveEventListener(function (_ref) {
        var fromCell = _ref.fromCell,
            toCell = _ref.toCell;

        _this.move(fromCell.point.index, toCell.point.index);
      });
      this.khmerChess.addBoardEventListener(function (boardEvent) {
        if (boardEvent.isAttack) {
          var cell = _this.boardManager.get(boardEvent.actorPieceIndex.point.index);

          cell.attack(true);

          var king = _this.boardManager.getKing(cell.piece.colorOpponent);

          king.attack(true);
        }
      });
    }
  }, {
    key: "move",
    value: function move(fromIndex, toIndex) {
      var move = this.khmerChess.move(fromIndex, toIndex);
      this.boardManager.clearSelectedCells();

      if (move !== null) {
        this.applyMove(move);
      }
    }
  }, {
    key: "setFullScreen",
    value: function setFullScreen(isFullScreen) {
      this.options.isFullScreen = isFullScreen;
      var table = this.domBoard;
      table.classList.remove(_constance.POPUP_CLASS_NAME);
      table.style.top = '0';
      table.style.left = '0';
      table.style.transform = '';
      table.style.zIndex = null;

      if (isFullScreen) {
        table.classList.add(_constance.POPUP_CLASS_NAME);
        table.style.top = '50%';
        table.style.left = '50%';
        var scaleFit = this.options.getScaleFit(table.getBoundingClientRect());
        table.style.transform = "translate(-50%,-50%) scale(".concat(scaleFit, ")");
        table.style.zIndex = '9999';
      }
    }
  }, {
    key: "render",
    value: function render() {
      this.addAllDomCss();

      var _drawBoardAndGraveyar = (0, _drawBoardAndGraveyard["default"])({
        uniqueClassName: this.options.uniqueClassName,
        options: this.options,
        container: this.containerDom,
        boardManager: this.boardManager,
        graveyardManager: this.graveyardManager
      }),
          domBoard = _drawBoardAndGraveyar.domBoard,
          domGraveyard = _drawBoardAndGraveyar.domGraveyard,
          playerContainer = _drawBoardAndGraveyar.playerContainer,
          tdShadow = _drawBoardAndGraveyar.tdShadow;

      this.domBoard = domBoard;
      this.graveyardManager.setDom(domGraveyard);
      this.pieceShadowManager.setTdShadow(tdShadow);
      this.setCellNote();
      this.applyPieces();
      this.messageManager.draw();
      this.playerManager.draw(playerContainer);
    }
  }, {
    key: "setLocale",
    value: function setLocale(locale) {
      var locales = ['en', 'km'];

      if (!~locales.indexOf(locale)) {
        console.log("Unsupported locale: ".concat(locale, ", supported locales: ").concat(locales.join(',')));
      } else {
        this.options.isEnglish = locale === locales[0];
        this.setCellNote();
      }
    }
  }, {
    key: "setCellNote",
    value: function setCellNote() {
      this.boardManager.clearCellNote();
      this.graveyardManager.clearCellNote();
      this.boardManager.setCellNote();
      this.graveyardManager.setCellNote();
    }
  }, {
    key: "addAllDomCss",
    value: function addAllDomCss() {
      (0, _addCss["default"])({
        uniqueClassName: this.options.uniqueClassName,
        options: this.options
      });
      (0, _addCssNote["default"])({
        uniqueClassName: this.options.uniqueClassName,
        options: this.options
      });
      (0, _addCssNote["default"])({
        uniqueClassName: this.options.uniqueClassName,
        options: this.options,
        isEnglish: true
      });
    }
  }, {
    key: "loadRen",
    value: function loadRen(renStr) {
      this.khmerChess.loadRENStr(renStr);
      this.applyPieces();
    }
  }, {
    key: "applyPieces",
    value: function applyPieces() {
      this.graveyardManager.renderKhmerChessPieces();
      this.boardManager.renderKhmerChessPieces();
    }
  }, {
    key: "removeAllDomElements",
    value: function removeAllDomElements() {
      var elements = document.querySelectorAll("table.".concat(this.options.uniqueClassName, " "));
      elements.forEach(function (element) {
        element.parentElement.removeChild(element);
      });
      this.removeAllDomCss();
    }
  }, {
    key: "removeAllDomCss",
    value: function removeAllDomCss() {
      var elements = document.querySelectorAll("style.".concat(this.options.uniqueClassName, " "));
      elements.forEach(function (element) {
        element.parentElement.removeChild(element);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeAllDomElements();
      this.containerDom = null;
      this.graveyardManager = null;
      this.boardManager = null;
      this.soundManager = null;
      this.khmerChess = null;
    }
  }, {
    key: "applyMove",
    value: function applyMove(move) {
      this.boardManager.clearMovedCells();
      this.boardManager.clearAttackCells();

      if (move.captured) {
        var fromBCell = this.boardManager.get(move.captured.fromBoardPoint.index);
        var toGYCell = this.graveyardManager.get(move.captured.toGraveyardPoint.index);
        this.pieceShadowManager.movingPiece(fromBCell, toGYCell, function () {
          fromBCell.movePieceToGraveyard(toGYCell);
        });
        this.soundManager.playCapture();
      }

      var fromCell = this.boardManager.get(move.moveFrom.index);
      var toCell = this.boardManager.get(move.moveTo.index);
      this.pieceShadowManager.movingPiece(fromCell, toCell, function () {
        fromCell.movePieceTo(toCell);
      });
      this.soundManager.playMove();
      this.khmerChess.checkBoardEvent();

      var turn = _khmerChess.Piece.oppositeColor(this.khmerChess.turn);

      this.playerManager.add(move.toString(), move.getMessage(this.options.isEnglish));
      this.boardManager.changeTurn(turn);
    }
  }, {
    key: "start",
    value: function start() {
      this.boardManager.changeTurn(_khmerChess.PIECE_COLOR_WHITE);
    }
  }]);

  return KhmerChessBoard;
}();

exports["default"] = KhmerChessBoard;

_defineProperty(KhmerChessBoard, "title", _package["default"].name);

_defineProperty(KhmerChessBoard, "version", _package["default"].version);

console.log(_khmerChess.KhmerChess.title, _khmerChess.KhmerChess.version);
console.log(KhmerChessBoard.title, KhmerChessBoard.version);
window.KhmerChessBoard = KhmerChessBoard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,