"use strict";

var _KhmerChessBoard = _interopRequireDefault(require("./KhmerChessBoard"));

var _khmerChess = require("khmer-chess");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe("KhmerChessBoard", function () {
  var kcb = null;
  beforeAll(function () {
    var container = document.createElement("div");
    document.body.appendChild(container);
    kcb = new _KhmerChessBoard["default"]();
    kcb.setOptions({
      width: 600,
      container: container
    });
    kcb.start();
  });
  it('should return correct cell', function () {
    var cell = kcb.boardManager.get(0);
    expect(cell.point.indexCode).toEqual('a1');
  });
  it('should be valid selection', function () {
    var cell = kcb.boardManager.pieceNotInTurnCells[0];
    kcb.boardManager.selectCell(cell);
    expect(cell.isSelected).toBeFalse();
  });
  it('should make correct selected', function () {
    var cell = kcb.boardManager.pieceInTurnCells[0];
    kcb.boardManager.selectCell(cell);
    expect(cell.isSelected).toBeTrue(); // second selection to clear

    kcb.boardManager.selectCell(cell);
    expect(cell.isSelected).toBeFalse();
  });
  it('should select another one', function () {
    var cell1 = kcb.boardManager.pieceInTurnCells[0];
    var cell2 = kcb.boardManager.pieceInTurnCells[2];
    kcb.boardManager.selectCell(cell1);
    kcb.boardManager.selectCell(cell2);
    expect(cell1.isSelected).toBeFalse();
    expect(cell2.isSelected).toBeTrue();
  });
  it('should return king', function () {
    var cell = kcb.boardManager.getKing(_KhmerChessBoard["default"].PIECE_COLOR_BLACK);
    expect(cell.piece.isColorBlack).toBeTrue();
    expect(cell.piece.isTypeKing).toBeTrue();
    cell = kcb.boardManager.getKing(_KhmerChessBoard["default"].PIECE_COLOR_WHITE);
    expect(cell.piece.isColorWhite).toBeTrue();
    expect(cell.piece.isTypeKing).toBeTrue();
  });
  it('should return by index code', function () {
    var point = new _khmerChess.Point(0, 0);
    var cell = kcb.boardManager.getByIndexCode(point.indexCode);
    expect(cell.point.indexCode).toBe(point.indexCode);
  });
  it('should return by x,y', function () {
    var point = new _khmerChess.Point(0, 0);
    var cell = kcb.boardManager.getByXY(point.x, point.y);
    expect(cell.point.indexCode).toBe(point.indexCode);
  });
  it('should flip', function () {
    // TODO: test all possible flip features
    var cell0 = kcb.boardManager.get(0);
    var cell = kcb.boardManager.pieceInTurnCells[0];
    var index = cell.point.index;
    kcb.boardManager.selectCell(cell);
    expect(cell0.point.indexCode).toBe('a1');
    kcb.boardManager.flip();
    expect(cell0.point.indexCode).toBe('h8');
    expect(cell.point.index).toBe(_khmerChess.CELL_COUNT - index - 1); // turn back

    kcb.boardManager.selectCell(cell);
    kcb.boardManager.flip();
    expect(cell0.point.indexCode).toBe('a1');
    expect(cell.point.index).toBe(index);
  });
  it('should return all cells that has piece', function () {
    var cells = kcb.boardManager.pieceCells;
    expect(cells.length).toBe(32);
  });
  it('should move', function () {
    kcb.pieceShadowManager.quickMove = true;
    var cell = kcb.boardManager.pieceInTurnCells[0];
    var piece = cell.piece;
    var point = cell.canMovePoints[0];
    var targetCell = kcb.boardManager.get(point.index);
    kcb.move(cell.point.index, targetCell.point.index);
    var movedCells = kcb.boardManager.movedCells;
    expect(movedCells[1].piece).toBe(piece);
  });
});
/*
 * Copyright (c) 2021, K4us
 * Author: Raksa Eng <eng.raksa@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 **/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,